definitions:
  common.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  common.RegisterRequest:
    properties:
      password:
        type: string
      role:
        $ref: '#/definitions/common.Role'
      username:
        type: string
    type: object
  common.Result:
    properties:
      code:
        type: integer
      data: {}
      msg:
        type: string
    type: object
  common.Role:
    enum:
    - Old
    - Volunteer
    - Admin
    type: string
    x-enum-varnames:
    - RoleOld
    - RoleVolunteer
    - RoleAdmin
  common.Status:
    enum:
    - Draft
    - Censoring
    - Passed
    - Rejected
    type: string
    x-enum-varnames:
    - StatusDraft
    - StatusCensoring
    - StatusPassed
    - StatusRejected
  common.TransactionResponse:
    properties:
      created_at:
        type: integer
      description:
        type: string
      id:
        type: integer
      status:
        $ref: '#/definitions/common.Status'
      title:
        type: string
      updated_at:
        type: integer
      value:
        type: integer
    type: object
host: localhost:8888
info:
  contact:
    email: Miyohashikori457@gmail.com
    name: KoriSama
    url: https://kori-sama.github.io/
  description: This is a API docs for MyGO project.
  title: MyGO!!!!! API docs
  version: "0.1"
paths:
  /api/blockchain/createWallet/{passphrase}:
    post:
      description: create wallet in blockchain
      parameters:
      - description: passphrase
        in: path
        name: passphrase
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: create wallet
      tags:
      - blockchain
  /api/blockchain/getBalance:
    get:
      description: get balance amount from wallet
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: get balance
      tags:
      - blockchain
  /api/login:
    post:
      consumes:
      - application/json
      description: login
      parameters:
      - description: login request
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/common.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: login
      tags:
      - user
  /api/register:
    post:
      consumes:
      - application/json
      description: register
      parameters:
      - description: register request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/common.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: register
      tags:
      - user
  /api/transaction:
    get:
      consumes:
      - application/json
      description: get all transactions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.TransactionResponse'
            type: array
      summary: get all transactions
      tags:
      - transaction
  /api/transaction/{id}:
    get:
      consumes:
      - application/json
      description: get single transaction by id
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.TransactionResponse'
      summary: get transaction
      tags:
      - transaction
  /api/transaction/by:
    get:
      consumes:
      - application/json
      description: get transactions by status
      parameters:
      - description: transaction status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/common.TransactionResponse'
            type: array
      summary: get transactions by status
      tags:
      - transaction
  /api/transaction/delete/{id}:
    post:
      consumes:
      - application/json
      description: Delete a transaction
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: Delete a transaction
      tags:
      - transaction
  /api/transaction/new:
    post:
      consumes:
      - application/json
      description: Create a new transaction
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: Create a new transaction
      tags:
      - transaction
  /api/transaction/publish:
    post:
      consumes:
      - application/json
      description: Publish a transaction
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: Publish a transaction
      tags:
      - transaction
  /api/transaction/save:
    post:
      consumes:
      - application/json
      description: Save a transaction
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.Result'
      summary: Save a transaction
      tags:
      - transaction
swagger: "2.0"
